name: Deploy CloudFormation Stack

on:
  workflow_dispatch:
    inputs:
      stack-name:
        description: 'Name of the CloudFormation stack'
        required: true
        default: 'load-test-infrastructure'
      s3-template-url:
        description: 'S3 URL to the CloudFormation template'
        required: true
      username:
        description: 'Username for the stack resources'
        required: true
      email:
        description: 'Email ID for notifications'
        required: true
      vpc-id:
        description: 'VPC ID where resources will be deployed'
        required: true
      subnet1:
        description: 'First subnet ID'
        required: true
      subnet2:
        description: 'Second subnet ID'
        required: true
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Format subnet IDs as parameter
        id: format-subnets
        run: |
          # Combine the two subnet IDs into a JSON array format
          SUBNET_PARAM="[\"${{ github.event.inputs.subnet1 }}\",\"${{ github.event.inputs.subnet2 }}\"]"
          echo "SUBNET_PARAM=$SUBNET_PARAM" >> $GITHUB_ENV
          
      - name: Validate CloudFormation template
        run: |
          aws cloudformation validate-template \
            --template-url ${{ github.event.inputs.s3-template-url }}
      
      - name: Deploy CloudFormation stack
        id: deploy-stack
        run: |
          # Check if stack exists
          if aws cloudformation describe-stacks --stack-name ${{ github.event.inputs.stack-name }} 2>&1 | grep -q "does not exist"; then
            # Create new stack
            aws cloudformation create-stack \
              --stack-name ${{ github.event.inputs.stack-name }} \
              --template-url ${{ github.event.inputs.s3-template-url }} \
              --parameters \
                ParameterKey=Username,ParameterValue=${{ github.event.inputs.username }} \
                ParameterKey=Email,ParameterValue=${{ github.event.inputs.email }} \
                ParameterKey=VpcId,ParameterValue=${{ github.event.inputs.vpc-id }} \
                ParameterKey=SubnetIds,ParameterValue='${{ env.SUBNET_PARAM }}' \
                ParameterKey=Environment,ParameterValue=${{ github.event.inputs.environment }} \
              --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM CAPABILITY_AUTO_EXPAND \
              --tags Key=Environment,Value=${{ github.event.inputs.environment }} Key=ManagedBy,Value=GitHub
            
            echo "Waiting for stack creation to complete..."
            aws cloudformation wait stack-create-complete --stack-name ${{ github.event.inputs.stack-name }}
          else
            # Update existing stack
            aws cloudformation update-stack \
              --stack-name ${{ github.event.inputs.stack-name }} \
              --template-url ${{ github.event.inputs.s3-template-url }} \
              --parameters \
                ParameterKey=Username,ParameterValue=${{ github.event.inputs.username }} \
                ParameterKey=Email,ParameterValue=${{ github.event.inputs.email }} \
                ParameterKey=VpcId,ParameterValue=${{ github.event.inputs.vpc-id }} \
                ParameterKey=SubnetIds,ParameterValue='${{ env.SUBNET_PARAM }}' \
                ParameterKey=Environment,ParameterValue=${{ github.event.inputs.environment }} \
              --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM CAPABILITY_AUTO_EXPAND
            
            echo "Waiting for stack update to complete..."
            aws cloudformation wait stack-update-complete --stack-name ${{ github.event.inputs.stack-name }}
          fi
      
      - name: Get stack outputs
        id: stack-outputs
        run: |
          OUTPUTS=$(aws cloudformation describe-stacks --stack-name ${{ github.event.inputs.stack-name }} --query "Stacks[0].Outputs" --output json)
          echo "outputs=$OUTPUTS" >> $GITHUB_OUTPUT
          
          # Extract specific outputs (assuming your CloudFormation template exports these)
          # Modify these based on your actual template outputs
          API_ENDPOINT=$(echo $OUTPUTS | jq -r '.[] | select(.OutputKey=="ApiEndpoint") | .OutputValue // ""')
          if [ ! -z "$API_ENDPOINT" ]; then
            echo "api-endpoint=$API_ENDPOINT" >> $GITHUB_OUTPUT
          fi
          
          # Store outputs in a file for other workflows to use
          echo $OUTPUTS > stack-outputs.json
      
      - name: Upload stack outputs artifact
        uses: actions/upload-artifact@v3
        with:
          name: stack-outputs
          path: stack-outputs.json
          retention-days: 7
      
      - name: Notify on completion
        run: |
          echo "Stack deployment completed successfully!"
          echo "Stack Name: ${{ github.event.inputs.stack-name }}"
          
          # Check if API endpoint exists and display it
          API_ENDPOINT=$(echo "${{ steps['stack-outputs'].outputs['api-endpoint'] }}" | tr -d '[:space:]')
          if [ ! -z "$API_ENDPOINT" ]; then
            echo "API Endpoint: $API_ENDPOINT"
          fi
          
          echo "Deployment Environment: ${{ github.event.inputs.environment }}"
          echo "Deployed by: ${{ github.event.inputs.username }} (${{ github.event.inputs.email }})"
          echo "Using VPC: ${{ github.event.inputs.vpc-id }}"
          echo "Using Subnets: ${{ github.event.inputs.subnet1 }}, ${{ github.event.inputs.subnet2 }}"